Here‚Äôs a one-page explanation for **Day 1: Node.js Intro & Architecture** along with **2 practice coding questions**:

---

## **Day 1: Node.js Intro & Architecture ‚Äî Build a "Hello World" HTTP Server**

### üîß What is Node.js?

Node.js is a **runtime environment** that lets you run JavaScript **outside the browser**, built on **Chrome‚Äôs V8 engine**. It‚Äôs especially suited for **building fast, scalable backend applications** like APIs, web servers, and real-time services.

### üß± Node.js Architecture

Node.js uses a **single-threaded** model with an **event-driven architecture**. Instead of waiting (blocking) for a task (like file read or database access) to complete, Node.js offloads it to the system and continues executing other code ‚Äî this is called **non-blocking I/O**.

#### Key Components:

- **Event Loop**: Handles async operations. Think of it like a traffic controller that picks up completed tasks and runs their callbacks.
- **V8 Engine**: Executes JavaScript fast.
- **Libuv**: Underlying C++ library that enables async I/O operations (files, sockets, etc.).
- **Callback Queue**: Stores async tasks (like `setTimeout`, file I/O) to be executed by the event loop.

---

### ‚ú® Build Your First HTTP Server

Here‚Äôs a simple `Hello World` HTTP server in Node.js:

```js
// hello-server.js
const http = require('http');

// Create server
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello, world from Node.js!');
});

// Listen on port 3000
server.listen(3000, () => {
  console.log('Server running at http://localhost:3000');
});
```

### üîÅ How it Works:

- `http.createServer()` sets up a server that responds to HTTP requests.
- When a request hits the server, the callback `(req, res)` is triggered.
- We respond with a plain-text message and status code `200 OK`.
- The server listens for connections on port 3000.

---

### ‚úÖ 2 Practice Coding Questions

1. **[Beginner] Modify the Hello World server to return different messages based on the request path.**
   - `/hello` should return "Hello!"
   - `/bye` should return "Goodbye!"
   - Any other path should return "Unknown route"

2. **[Intermediate] Add basic logging to the HTTP server:**
   - Log the request method and URL to the console.
   - Log the time of each request.

---

Let me know if you want code walkthroughs, hints for the questions, or to dive deeper into the event loop next!